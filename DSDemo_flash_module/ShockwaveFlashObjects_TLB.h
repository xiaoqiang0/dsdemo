// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 2013/10/15 8:22:58 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\System32\Macromed\Flash\Flash.ocx (1)
// LIBID: {D27CDB6B-AE6D-11CF-96B8-444553540000}
// LCID: 0
// Helpfile: 
// HelpString: Shockwave Flash
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   ShockwaveFlashObjects_TLBH
#define   ShockwaveFlashObjects_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Shockwaveflashobjects_tlb
{

// *********************************************************************//
// HelpString: Shockwave Flash
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ShockwaveFlashObjects;
extern __declspec (package) const GUID IID_IShockwaveFlash;
extern __declspec (package) const GUID IID_ICanHandleException;
extern __declspec (package) const GUID DIID__IShockwaveFlashEvents;
extern __declspec (package) const GUID CLSID_ShockwaveFlash;
extern __declspec (package) const GUID IID_IFlashFactory;
extern __declspec (package) const GUID IID_IDispatchEx;
extern __declspec (package) const GUID IID_IFlashObjectInterface;
extern __declspec (package) const GUID IID_IServiceProvider;
extern __declspec (package) const GUID CLSID_FlashObjectInterface;
extern __declspec (package) const GUID IID_IFlashObject;
extern __declspec (package) const GUID CLSID_FlashObject;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{D27CDB6C-AE6D-11CF-96B8-444553540000}") IShockwaveFlash;
typedef TComInterface<IShockwaveFlash, &IID_IShockwaveFlash> IShockwaveFlashPtr;

interface DECLSPEC_UUID("{C5598E60-B307-11D1-B27D-006008C3FBFB}") ICanHandleException;
typedef TComInterface<ICanHandleException, &IID_ICanHandleException> ICanHandleExceptionPtr;

interface DECLSPEC_UUID("{D27CDB6D-AE6D-11CF-96B8-444553540000}") _IShockwaveFlashEvents;
typedef TComInterface<_IShockwaveFlashEvents, &DIID__IShockwaveFlashEvents> _IShockwaveFlashEventsPtr;

interface DECLSPEC_UUID("{D27CDB70-AE6D-11CF-96B8-444553540000}") IFlashFactory;
typedef TComInterface<IFlashFactory, &IID_IFlashFactory> IFlashFactoryPtr;

interface DECLSPEC_UUID("{A6EF9860-C720-11D0-9337-00A0C90DCAA9}") IDispatchEx;
typedef TComInterface<IDispatchEx, &IID_IDispatchEx> IDispatchExPtr;

interface DECLSPEC_UUID("{D27CDB72-AE6D-11CF-96B8-444553540000}") IFlashObjectInterface;
typedef TComInterface<IFlashObjectInterface, &IID_IFlashObjectInterface> IFlashObjectInterfacePtr;

interface DECLSPEC_UUID("{6D5140C1-7436-11CE-8034-00AA006009FA}") IServiceProvider;
typedef TComInterface<IServiceProvider, &IID_IServiceProvider> IServiceProviderPtr;

interface DECLSPEC_UUID("{86230738-D762-4C50-A2DE-A753E5B1686F}") IFlashObject;
typedef TComInterface<IFlashObject, &IID_IFlashObject> IFlashObjectPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IShockwaveFlash ShockwaveFlash;
typedef IShockwaveFlashPtr ShockwaveFlashPtr;
typedef IFlashObjectInterface FlashObjectInterface;
typedef IFlashObjectInterfacePtr FlashObjectInterfacePtr;
typedef IFlashObject FlashObject;
typedef IFlashObjectPtr FlashObjectPtr;

#define LIBID_OF_ShockwaveFlash (&LIBID_ShockwaveFlashObjects)
#define LIBID_OF_FlashObjectInterface (&LIBID_ShockwaveFlashObjects)
#define LIBID_OF_FlashObject (&LIBID_ShockwaveFlashObjects)
// *********************************************************************//
// Interface: IShockwaveFlash
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D27CDB6C-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
interface IShockwaveFlash  : public IDispatch
{
public:
  // [-525] property ReadyState
  virtual HRESULT STDMETHODCALLTYPE get_ReadyState(long* pVal/*[out,retval]*/) = 0;
  // [124] property TotalFrames
  virtual HRESULT STDMETHODCALLTYPE get_TotalFrames(long* pVal/*[out,retval]*/) = 0;
  // [125] property Playing
  virtual HRESULT STDMETHODCALLTYPE get_Playing(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [125] property Playing
  virtual HRESULT STDMETHODCALLTYPE set_Playing(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [105] property Quality
  virtual HRESULT STDMETHODCALLTYPE get_Quality(int* pVal/*[out,retval]*/) = 0;
  // [105] property Quality
  virtual HRESULT STDMETHODCALLTYPE set_Quality(int pVal/*[in]*/) = 0;
  // [120] property ScaleMode
  virtual HRESULT STDMETHODCALLTYPE get_ScaleMode(int* pVal/*[out,retval]*/) = 0;
  // [120] property ScaleMode
  virtual HRESULT STDMETHODCALLTYPE set_ScaleMode(int pVal/*[in]*/) = 0;
  // [121] property AlignMode
  virtual HRESULT STDMETHODCALLTYPE get_AlignMode(int* pVal/*[out,retval]*/) = 0;
  // [121] property AlignMode
  virtual HRESULT STDMETHODCALLTYPE set_AlignMode(int pVal/*[in]*/) = 0;
  // [123] property BackgroundColor
  virtual HRESULT STDMETHODCALLTYPE get_BackgroundColor(long* pVal/*[out,retval]*/) = 0;
  // [123] property BackgroundColor
  virtual HRESULT STDMETHODCALLTYPE set_BackgroundColor(long pVal/*[in]*/) = 0;
  // [106] property Loop
  virtual HRESULT STDMETHODCALLTYPE get_Loop(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [106] property Loop
  virtual HRESULT STDMETHODCALLTYPE set_Loop(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [102] property Movie
  virtual HRESULT STDMETHODCALLTYPE get_Movie(BSTR* pVal/*[out,retval]*/) = 0;
  // [102] property Movie
  virtual HRESULT STDMETHODCALLTYPE set_Movie(BSTR pVal/*[in]*/) = 0;
  // [107] property FrameNum
  virtual HRESULT STDMETHODCALLTYPE get_FrameNum(long* pVal/*[out,retval]*/) = 0;
  // [107] property FrameNum
  virtual HRESULT STDMETHODCALLTYPE set_FrameNum(long pVal/*[in]*/) = 0;
  // [109] method SetZoomRect
  virtual HRESULT STDMETHODCALLTYPE SetZoomRect(long left/*[in]*/, long top/*[in]*/, 
                                                long right/*[in]*/, long bottom/*[in]*/) = 0;
  // [118] method Zoom
  virtual HRESULT STDMETHODCALLTYPE Zoom(int factor/*[in]*/) = 0;
  // [119] method Pan
  virtual HRESULT STDMETHODCALLTYPE Pan(long x/*[in]*/, long y/*[in]*/, int mode/*[in]*/) = 0;
  // [112] method Play
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0;
  // [113] method Stop
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [114] method Back
  virtual HRESULT STDMETHODCALLTYPE Back(void) = 0;
  // [115] method Forward
  virtual HRESULT STDMETHODCALLTYPE Forward(void) = 0;
  // [116] method Rewind
  virtual HRESULT STDMETHODCALLTYPE Rewind(void) = 0;
  // [126] method StopPlay
  virtual HRESULT STDMETHODCALLTYPE StopPlay(void) = 0;
  // [127] method GotoFrame
  virtual HRESULT STDMETHODCALLTYPE GotoFrame(long FrameNum/*[in]*/) = 0;
  // [128] method CurrentFrame
  virtual HRESULT STDMETHODCALLTYPE CurrentFrame(long* FrameNum/*[out,retval]*/) = 0;
  // [129] method IsPlaying
  virtual HRESULT STDMETHODCALLTYPE IsPlaying(VARIANT_BOOL* Playing/*[out,retval]*/) = 0;
  // [130] method PercentLoaded
  virtual HRESULT STDMETHODCALLTYPE PercentLoaded(long* percent/*[out,retval]*/) = 0;
  // [131] method FrameLoaded
  virtual HRESULT STDMETHODCALLTYPE FrameLoaded(long FrameNum/*[in]*/, 
                                                VARIANT_BOOL* loaded/*[out,retval]*/) = 0;
  // [132] method FlashVersion
  virtual HRESULT STDMETHODCALLTYPE FlashVersion(long* version/*[out,retval]*/) = 0;
  // [133] property WMode
  virtual HRESULT STDMETHODCALLTYPE get_WMode(BSTR* pVal/*[out,retval]*/) = 0;
  // [133] property WMode
  virtual HRESULT STDMETHODCALLTYPE set_WMode(BSTR pVal/*[in]*/) = 0;
  // [134] property SAlign
  virtual HRESULT STDMETHODCALLTYPE get_SAlign(BSTR* pVal/*[out,retval]*/) = 0;
  // [134] property SAlign
  virtual HRESULT STDMETHODCALLTYPE set_SAlign(BSTR pVal/*[in]*/) = 0;
  // [135] property Menu
  virtual HRESULT STDMETHODCALLTYPE get_Menu(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [135] property Menu
  virtual HRESULT STDMETHODCALLTYPE set_Menu(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [136] property Base
  virtual HRESULT STDMETHODCALLTYPE get_Base(BSTR* pVal/*[out,retval]*/) = 0;
  // [136] property Base
  virtual HRESULT STDMETHODCALLTYPE set_Base(BSTR pVal/*[in]*/) = 0;
  // [137] property Scale
  virtual HRESULT STDMETHODCALLTYPE get_Scale(BSTR* pVal/*[out,retval]*/) = 0;
  // [137] property Scale
  virtual HRESULT STDMETHODCALLTYPE set_Scale(BSTR pVal/*[in]*/) = 0;
  // [138] property DeviceFont
  virtual HRESULT STDMETHODCALLTYPE get_DeviceFont(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [138] property DeviceFont
  virtual HRESULT STDMETHODCALLTYPE set_DeviceFont(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [139] property EmbedMovie
  virtual HRESULT STDMETHODCALLTYPE get_EmbedMovie(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [139] property EmbedMovie
  virtual HRESULT STDMETHODCALLTYPE set_EmbedMovie(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [140] property BGColor
  virtual HRESULT STDMETHODCALLTYPE get_BGColor(BSTR* pVal/*[out,retval]*/) = 0;
  // [140] property BGColor
  virtual HRESULT STDMETHODCALLTYPE set_BGColor(BSTR pVal/*[in]*/) = 0;
  // [141] property Quality2
  virtual HRESULT STDMETHODCALLTYPE get_Quality2(BSTR* pVal/*[out,retval]*/) = 0;
  // [141] property Quality2
  virtual HRESULT STDMETHODCALLTYPE set_Quality2(BSTR pVal/*[in]*/) = 0;
  // [142] method LoadMovie
  virtual HRESULT STDMETHODCALLTYPE LoadMovie(int layer/*[in]*/, BSTR url/*[in]*/) = 0;
  // [143] method TGotoFrame
  virtual HRESULT STDMETHODCALLTYPE TGotoFrame(BSTR target/*[in]*/, long FrameNum/*[in]*/) = 0;
  // [144] method TGotoLabel
  virtual HRESULT STDMETHODCALLTYPE TGotoLabel(BSTR target/*[in]*/, BSTR label/*[in]*/) = 0;
  // [145] method TCurrentFrame
  virtual HRESULT STDMETHODCALLTYPE TCurrentFrame(BSTR target/*[in]*/, 
                                                  long* FrameNum/*[out,retval]*/) = 0;
  // [146] method TCurrentLabel
  virtual HRESULT STDMETHODCALLTYPE TCurrentLabel(BSTR target/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [147] method TPlay
  virtual HRESULT STDMETHODCALLTYPE TPlay(BSTR target/*[in]*/) = 0;
  // [148] method TStopPlay
  virtual HRESULT STDMETHODCALLTYPE TStopPlay(BSTR target/*[in]*/) = 0;
  // [151] method SetVariable
  virtual HRESULT STDMETHODCALLTYPE SetVariable(BSTR name/*[in]*/, BSTR value/*[in]*/) = 0;
  // [152] method GetVariable
  virtual HRESULT STDMETHODCALLTYPE GetVariable(BSTR name/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [153] method TSetProperty
  virtual HRESULT STDMETHODCALLTYPE TSetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                                 BSTR value/*[in]*/) = 0;
  // [154] method TGetProperty
  virtual HRESULT STDMETHODCALLTYPE TGetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                                 BSTR* pVal/*[out,retval]*/) = 0;
  // [155] method TCallFrame
  virtual HRESULT STDMETHODCALLTYPE TCallFrame(BSTR target/*[in]*/, int FrameNum/*[in]*/) = 0;
  // [156] method TCallLabel
  virtual HRESULT STDMETHODCALLTYPE TCallLabel(BSTR target/*[in]*/, BSTR label/*[in]*/) = 0;
  // [157] method TSetPropertyNum
  virtual HRESULT STDMETHODCALLTYPE TSetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                                    double value/*[in]*/) = 0;
  // [158] method TGetPropertyNum
  virtual HRESULT STDMETHODCALLTYPE TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                                    double* pVal/*[out,retval]*/) = 0;
  // [172] method TGetPropertyAsNumber
  virtual HRESULT STDMETHODCALLTYPE TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/, 
                                                         double* pVal/*[out,retval]*/) = 0;
  // [159] property SWRemote
  virtual HRESULT STDMETHODCALLTYPE get_SWRemote(BSTR* pVal/*[out,retval]*/) = 0;
  // [159] property SWRemote
  virtual HRESULT STDMETHODCALLTYPE set_SWRemote(BSTR pVal/*[in]*/) = 0;
  // [170] property FlashVars
  virtual HRESULT STDMETHODCALLTYPE get_FlashVars(BSTR* pVal/*[out,retval]*/) = 0;
  // [170] property FlashVars
  virtual HRESULT STDMETHODCALLTYPE set_FlashVars(BSTR pVal/*[in]*/) = 0;
  // [171] property AllowScriptAccess
  virtual HRESULT STDMETHODCALLTYPE get_AllowScriptAccess(BSTR* pVal/*[out,retval]*/) = 0;
  // [171] property AllowScriptAccess
  virtual HRESULT STDMETHODCALLTYPE set_AllowScriptAccess(BSTR pVal/*[in]*/) = 0;
  // [190] property MovieData
  virtual HRESULT STDMETHODCALLTYPE get_MovieData(BSTR* pVal/*[out,retval]*/) = 0;
  // [190] property MovieData
  virtual HRESULT STDMETHODCALLTYPE set_MovieData(BSTR pVal/*[in]*/) = 0;
  // [191] property inline-data
  virtual HRESULT STDMETHODCALLTYPE get_InlineData(LPUNKNOWN* ppIUnknown/*[out,retval]*/) = 0;
  // [191] property inline-data
  virtual HRESULT STDMETHODCALLTYPE set_InlineData(LPUNKNOWN ppIUnknown/*[in]*/) = 0;
  // [192] property SeamlessTabbing
  virtual HRESULT STDMETHODCALLTYPE get_SeamlessTabbing(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [192] property SeamlessTabbing
  virtual HRESULT STDMETHODCALLTYPE set_SeamlessTabbing(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [193] method EnforceLocalSecurity
  virtual HRESULT STDMETHODCALLTYPE EnforceLocalSecurity(void) = 0;
  // [194] property Profile
  virtual HRESULT STDMETHODCALLTYPE get_Profile(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [194] property Profile
  virtual HRESULT STDMETHODCALLTYPE set_Profile(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [195] property ProfileAddress
  virtual HRESULT STDMETHODCALLTYPE get_ProfileAddress(BSTR* pVal/*[out,retval]*/) = 0;
  // [195] property ProfileAddress
  virtual HRESULT STDMETHODCALLTYPE set_ProfileAddress(BSTR pVal/*[in]*/) = 0;
  // [196] property ProfilePort
  virtual HRESULT STDMETHODCALLTYPE get_ProfilePort(long* pVal/*[out,retval]*/) = 0;
  // [196] property ProfilePort
  virtual HRESULT STDMETHODCALLTYPE set_ProfilePort(long pVal/*[in]*/) = 0;
  // [198] method Call
  virtual HRESULT STDMETHODCALLTYPE CallFunction(BSTR request/*[in]*/, 
                                                 BSTR* response/*[out,retval]*/) = 0;
  // [199] method SetReturnValue
  virtual HRESULT STDMETHODCALLTYPE SetReturnValue(BSTR returnValue/*[in]*/) = 0;
  // [200] method DisableLocalSecurity
  virtual HRESULT STDMETHODCALLTYPE DisableLocalSecurity(void) = 0;
  // [201] property AllowNetworking
  virtual HRESULT STDMETHODCALLTYPE get_AllowNetworking(BSTR* pVal/*[out,retval]*/) = 0;
  // [201] property AllowNetworking
  virtual HRESULT STDMETHODCALLTYPE set_AllowNetworking(BSTR pVal/*[in]*/) = 0;
  // [202] property AllowFullScreen
  virtual HRESULT STDMETHODCALLTYPE get_AllowFullScreen(BSTR* pVal/*[out,retval]*/) = 0;
  // [202] property AllowFullScreen
  virtual HRESULT STDMETHODCALLTYPE set_AllowFullScreen(BSTR pVal/*[in]*/) = 0;
  // [501] property AllowFullScreenInteractive
  virtual HRESULT STDMETHODCALLTYPE get_AllowFullScreenInteractive(BSTR* pVal/*[out,retval]*/) = 0;
  // [501] property AllowFullScreenInteractive
  virtual HRESULT STDMETHODCALLTYPE set_AllowFullScreenInteractive(BSTR pVal/*[in]*/) = 0;
  // [502] property IsDependent
  virtual HRESULT STDMETHODCALLTYPE get_IsDependent(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [502] property IsDependent
  virtual HRESULT STDMETHODCALLTYPE set_IsDependent(VARIANT_BOOL pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ReadyState(void)
  {
    long pVal;
    OLECHECK(this->get_ReadyState((long*)&pVal));
    return pVal;
  }

  long __fastcall get_TotalFrames(void)
  {
    long pVal;
    OLECHECK(this->get_TotalFrames((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Playing(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Playing((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  int __fastcall get_Quality(void)
  {
    int pVal;
    OLECHECK(this->get_Quality((int*)&pVal));
    return pVal;
  }

  int __fastcall get_ScaleMode(void)
  {
    int pVal;
    OLECHECK(this->get_ScaleMode((int*)&pVal));
    return pVal;
  }

  int __fastcall get_AlignMode(void)
  {
    int pVal;
    OLECHECK(this->get_AlignMode((int*)&pVal));
    return pVal;
  }

  long __fastcall get_BackgroundColor(void)
  {
    long pVal;
    OLECHECK(this->get_BackgroundColor((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Loop(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Loop((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Movie(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Movie((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_FrameNum(void)
  {
    long pVal;
    OLECHECK(this->get_FrameNum((long*)&pVal));
    return pVal;
  }

  long __fastcall CurrentFrame(void)
  {
    long FrameNum;
    OLECHECK(this->CurrentFrame((long*)&FrameNum));
    return FrameNum;
  }

  VARIANT_BOOL __fastcall IsPlaying(void)
  {
    VARIANT_BOOL Playing;
    OLECHECK(this->IsPlaying((VARIANT_BOOL*)&Playing));
    return Playing;
  }

  long __fastcall PercentLoaded(void)
  {
    long percent;
    OLECHECK(this->PercentLoaded((long*)&percent));
    return percent;
  }

  VARIANT_BOOL __fastcall FrameLoaded(long FrameNum/*[in]*/)
  {
    VARIANT_BOOL loaded;
    OLECHECK(this->FrameLoaded(FrameNum, (VARIANT_BOOL*)&loaded));
    return loaded;
  }

  long __fastcall FlashVersion(void)
  {
    long version;
    OLECHECK(this->FlashVersion((long*)&version));
    return version;
  }

  BSTR __fastcall get_WMode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_WMode((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SAlign(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SAlign((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Menu(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Menu((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Base(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Base((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Scale(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Scale((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DeviceFont(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DeviceFont((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_EmbedMovie(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_EmbedMovie((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BGColor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BGColor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Quality2(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Quality2((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall TCurrentFrame(BSTR target/*[in]*/)
  {
    long FrameNum;
    OLECHECK(this->TCurrentFrame(target, (long*)&FrameNum));
    return FrameNum;
  }

  BSTR __fastcall TCurrentLabel(BSTR target/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->TCurrentLabel(target, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall GetVariable(BSTR name/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->GetVariable(name, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall TGetProperty(BSTR target/*[in]*/, int property/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->TGetProperty(target, property, (BSTR*)&pVal));
    return pVal;
  }

  double __fastcall TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/)
  {
    double pVal;
    OLECHECK(this->TGetPropertyNum(target, property, (double*)&pVal));
    return pVal;
  }

  double __fastcall TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/)
  {
    double pVal;
    OLECHECK(this->TGetPropertyAsNumber(target, property, (double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SWRemote(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SWRemote((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FlashVars(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FlashVars((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AllowScriptAccess(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AllowScriptAccess((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_MovieData(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_MovieData((BSTR*)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get_InlineData(void)
  {
    LPUNKNOWN ppIUnknown;
    OLECHECK(this->get_InlineData((LPUNKNOWN*)&ppIUnknown));
    return ppIUnknown;
  }

  VARIANT_BOOL __fastcall get_SeamlessTabbing(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SeamlessTabbing((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Profile(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Profile((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ProfileAddress(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ProfileAddress((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ProfilePort(void)
  {
    long pVal;
    OLECHECK(this->get_ProfilePort((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallFunction(BSTR request/*[in]*/)
  {
    BSTR response = 0;
    OLECHECK(this->CallFunction(request, (BSTR*)&response));
    return response;
  }

  BSTR __fastcall get_AllowNetworking(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AllowNetworking((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AllowFullScreen(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AllowFullScreen((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AllowFullScreenInteractive(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AllowFullScreenInteractive((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsDependent(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsDependent((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   long            ReadyState = {read = get_ReadyState};
  __property   long            TotalFrames = {read = get_TotalFrames};
  __property   VARIANT_BOOL    Playing = {read = get_Playing, write = set_Playing};
  __property   int             Quality = {read = get_Quality, write = set_Quality};
  __property   int             ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   int             AlignMode = {read = get_AlignMode, write = set_AlignMode};
  __property   long            BackgroundColor = {read = get_BackgroundColor, write = set_BackgroundColor};
  __property   VARIANT_BOOL    Loop = {read = get_Loop, write = set_Loop};
  __property   BSTR            Movie = {read = get_Movie, write = set_Movie};
  __property   long            FrameNum = {read = get_FrameNum, write = set_FrameNum};
  __property   BSTR            WMode = {read = get_WMode, write = set_WMode};
  __property   BSTR            SAlign = {read = get_SAlign, write = set_SAlign};
  __property   VARIANT_BOOL    Menu = {read = get_Menu, write = set_Menu};
  __property   BSTR            Base = {read = get_Base, write = set_Base};
  __property   BSTR            Scale = {read = get_Scale, write = set_Scale};
  __property   VARIANT_BOOL    DeviceFont = {read = get_DeviceFont, write = set_DeviceFont};
  __property   VARIANT_BOOL    EmbedMovie = {read = get_EmbedMovie, write = set_EmbedMovie};
  __property   BSTR            BGColor = {read = get_BGColor, write = set_BGColor};
  __property   BSTR            Quality2 = {read = get_Quality2, write = set_Quality2};
  __property   BSTR            SWRemote = {read = get_SWRemote, write = set_SWRemote};
  __property   BSTR            FlashVars = {read = get_FlashVars, write = set_FlashVars};
  __property   BSTR            AllowScriptAccess = {read = get_AllowScriptAccess, write = set_AllowScriptAccess};
  __property   BSTR            MovieData = {read = get_MovieData, write = set_MovieData};
  __property   LPUNKNOWN       InlineData = {read = get_InlineData, write = set_InlineData};
  __property   VARIANT_BOOL    SeamlessTabbing = {read = get_SeamlessTabbing, write = set_SeamlessTabbing};
  __property   VARIANT_BOOL    Profile = {read = get_Profile, write = set_Profile};
  __property   BSTR            ProfileAddress = {read = get_ProfileAddress, write = set_ProfileAddress};
  __property   long            ProfilePort = {read = get_ProfilePort, write = set_ProfilePort};
  __property   BSTR            AllowNetworking = {read = get_AllowNetworking, write = set_AllowNetworking};
  __property   BSTR            AllowFullScreen = {read = get_AllowFullScreen, write = set_AllowFullScreen};
  __property   BSTR            AllowFullScreenInteractive = {read = get_AllowFullScreenInteractive, write = set_AllowFullScreenInteractive};
  __property   VARIANT_BOOL    IsDependent = {read = get_IsDependent, write = set_IsDependent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICanHandleException
// Flags:     (0)
// GUID:      {C5598E60-B307-11D1-B27D-006008C3FBFB}
// *********************************************************************//
interface ICanHandleException  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE CanHandleException(EXCEPINFO* pExcepInfo/*[in]*/, 
                                                       VARIANT* pvar/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: _IShockwaveFlashEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D27CDB6D-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
interface _IShockwaveFlashEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnReadyStateChange(long newState)
  {
    _TDispID _dispid(/* OnReadyStateChange */ DISPID(-609));
    TAutoArgs<1> _args;
    _args[1] = newState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnProgress(long percentDone)
  {
    _TDispID _dispid(/* OnProgress */ DISPID(1958));
    TAutoArgs<1> _args;
    _args[1] = percentDone /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall FSCommand(BSTR command/*[in]*/, BSTR args/*[in]*/)
  {
    _TDispID _dispid(/* FSCommand */ DISPID(150));
    TAutoArgs<2> _args;
    _args[1] = command /*[VT_BSTR:0]*/;
    _args[2] = args /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall FlashCall(BSTR request/*[in]*/)
  {
    _TDispID _dispid(/* FlashCall */ DISPID(197));
    TAutoArgs<1> _args;
    _args[1] = request /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IFlashFactory
// Flags:     (0)
// GUID:      {D27CDB70-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
interface IFlashFactory  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: IDispatchEx
// Flags:     (4096) Dispatchable
// GUID:      {A6EF9860-C720-11D0-9337-00A0C90DCAA9}
// *********************************************************************//
interface IDispatchEx  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE GetDispID(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/, 
                                       long* pid/*[out]*/); // [-1]
   HRESULT STDMETHODCALLTYPE RemoteInvokeEx(long id/*[in]*/, unsigned_long lcid/*[in]*/, 
                                            unsigned_long dwFlags/*[in]*/, DISPPARAMS* pdp/*[in]*/, 
                                            VARIANT* pvarRes/*[out]*/, EXCEPINFO* pei/*[out]*/, 
                                            Shockwaveflashobjects_tlb::IServiceProvider* pspCaller/*[in]*/, 
                                            unsigned cvarRefArg/*[in]*/, unsigned* rgiRefArg/*[in]*/, 
                                            VARIANT* rgvarRefArg/*[in,out]*/); // [-1]
   HRESULT STDMETHODCALLTYPE DeleteMemberByName(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/); // [-1]
   HRESULT STDMETHODCALLTYPE DeleteMemberByDispID(long id/*[in]*/); // [-1]
   HRESULT STDMETHODCALLTYPE GetMemberProperties(long id/*[in]*/, unsigned_long grfdexFetch/*[in]*/, 
                                                 unsigned_long* pgrfdex/*[out]*/); // [-1]
   HRESULT STDMETHODCALLTYPE GetMemberName(long id/*[in]*/, BSTR* pbstrName/*[out]*/); // [-1]
   HRESULT STDMETHODCALLTYPE GetNextDispID(unsigned_long grfdex/*[in]*/, long id/*[in]*/, 
                                           long* pid/*[out]*/); // [-1]
   HRESULT STDMETHODCALLTYPE GetNameSpaceParent(LPUNKNOWN* ppunk/*[out]*/); // [-1]
};

// *********************************************************************//
// Interface: IFlashObjectInterface
// Flags:     (4096) Dispatchable
// GUID:      {D27CDB72-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
interface IFlashObjectInterface  : public Shockwaveflashobjects_tlb::IDispatchEx
{
public:
};

// *********************************************************************//
// Interface: IServiceProvider
// Flags:     (0)
// GUID:      {6D5140C1-7436-11CE-8034-00AA006009FA}
// *********************************************************************//
interface IServiceProvider  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RemoteQueryService(System::TGUID* guidService/*[in]*/, 
                                                       System::TGUID* riid/*[in]*/, 
                                                       LPUNKNOWN* ppvObject/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IFlashObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86230738-D762-4C50-A2DE-A753E5B1686F}
// *********************************************************************//
interface IFlashObject  : public Shockwaveflashobjects_tlb::IDispatchEx
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIShockwaveFlash
// Interface: IShockwaveFlash
// *********************************************************************//
template <class T /* IShockwaveFlash */ >
class TCOMIShockwaveFlashT : public TComInterface<IShockwaveFlash>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIShockwaveFlashT() {}
  TCOMIShockwaveFlashT(IShockwaveFlash *intf, bool addRef = false) : TComInterface<IShockwaveFlash>(intf, addRef) {}
  TCOMIShockwaveFlashT(const TCOMIShockwaveFlashT& src) : TComInterface<IShockwaveFlash>(src) {}
  TCOMIShockwaveFlashT& operator=(const TCOMIShockwaveFlashT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ReadyState(long* pVal/*[out,retval]*/);
  long            __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_TotalFrames(long* pVal/*[out,retval]*/);
  long            __fastcall get_TotalFrames(void);
  HRESULT         __fastcall get_Playing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Playing(void);
  HRESULT         __fastcall set_Playing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Quality(int* pVal/*[out,retval]*/);
  int             __fastcall get_Quality(void);
  HRESULT         __fastcall set_Quality(int pVal/*[in]*/);
  HRESULT         __fastcall get_ScaleMode(int* pVal/*[out,retval]*/);
  int             __fastcall get_ScaleMode(void);
  HRESULT         __fastcall set_ScaleMode(int pVal/*[in]*/);
  HRESULT         __fastcall get_AlignMode(int* pVal/*[out,retval]*/);
  int             __fastcall get_AlignMode(void);
  HRESULT         __fastcall set_AlignMode(int pVal/*[in]*/);
  HRESULT         __fastcall get_BackgroundColor(long* pVal/*[out,retval]*/);
  long            __fastcall get_BackgroundColor(void);
  HRESULT         __fastcall set_BackgroundColor(long pVal/*[in]*/);
  HRESULT         __fastcall get_Loop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Loop(void);
  HRESULT         __fastcall set_Loop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Movie(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Movie(void);
  HRESULT         __fastcall set_Movie(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FrameNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_FrameNum(void);
  HRESULT         __fastcall set_FrameNum(long pVal/*[in]*/);
  HRESULT         __fastcall SetZoomRect(long left/*[in]*/, long top/*[in]*/, long right/*[in]*/, 
                                         long bottom/*[in]*/);
  HRESULT         __fastcall Zoom(int factor/*[in]*/);
  HRESULT         __fastcall Pan(long x/*[in]*/, long y/*[in]*/, int mode/*[in]*/);
  HRESULT         __fastcall Play(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall Back(void);
  HRESULT         __fastcall Forward(void);
  HRESULT         __fastcall Rewind(void);
  HRESULT         __fastcall StopPlay(void);
  HRESULT         __fastcall GotoFrame(long FrameNum/*[in]*/);
  HRESULT         __fastcall CurrentFrame(long* FrameNum/*[out,retval]*/);
  long            __fastcall CurrentFrame(void);
  HRESULT         __fastcall IsPlaying(VARIANT_BOOL* Playing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsPlaying(void);
  HRESULT         __fastcall PercentLoaded(long* percent/*[out,retval]*/);
  long            __fastcall PercentLoaded(void);
  HRESULT         __fastcall FrameLoaded(long FrameNum/*[in]*/, VARIANT_BOOL* loaded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall FrameLoaded(long FrameNum/*[in]*/);
  HRESULT         __fastcall FlashVersion(long* version/*[out,retval]*/);
  long            __fastcall FlashVersion(void);
  HRESULT         __fastcall get_WMode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_WMode(void);
  HRESULT         __fastcall set_WMode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SAlign(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SAlign(void);
  HRESULT         __fastcall set_SAlign(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Menu(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Menu(void);
  HRESULT         __fastcall set_Menu(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Base(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Base(void);
  HRESULT         __fastcall set_Base(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Scale(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Scale(void);
  HRESULT         __fastcall set_Scale(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DeviceFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DeviceFont(void);
  HRESULT         __fastcall set_DeviceFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_EmbedMovie(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EmbedMovie(void);
  HRESULT         __fastcall set_EmbedMovie(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BGColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BGColor(void);
  HRESULT         __fastcall set_BGColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Quality2(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Quality2(void);
  HRESULT         __fastcall set_Quality2(BSTR pVal/*[in]*/);
  HRESULT         __fastcall LoadMovie(int layer/*[in]*/, BSTR url/*[in]*/);
  HRESULT         __fastcall TGotoFrame(BSTR target/*[in]*/, long FrameNum/*[in]*/);
  HRESULT         __fastcall TGotoLabel(BSTR target/*[in]*/, BSTR label/*[in]*/);
  HRESULT         __fastcall TCurrentFrame(BSTR target/*[in]*/, long* FrameNum/*[out,retval]*/);
  long            __fastcall TCurrentFrame(BSTR target/*[in]*/);
  HRESULT         __fastcall TCurrentLabel(BSTR target/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall TCurrentLabel(BSTR target/*[in]*/);
  HRESULT         __fastcall TPlay(BSTR target/*[in]*/);
  HRESULT         __fastcall TStopPlay(BSTR target/*[in]*/);
  HRESULT         __fastcall SetVariable(BSTR name/*[in]*/, BSTR value/*[in]*/);
  HRESULT         __fastcall GetVariable(BSTR name/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GetVariable(BSTR name/*[in]*/);
  HRESULT         __fastcall TSetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                          BSTR value/*[in]*/);
  HRESULT         __fastcall TGetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                          BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall TGetProperty(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall TCallFrame(BSTR target/*[in]*/, int FrameNum/*[in]*/);
  HRESULT         __fastcall TCallLabel(BSTR target/*[in]*/, BSTR label/*[in]*/);
  HRESULT         __fastcall TSetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                             double value/*[in]*/);
  HRESULT         __fastcall TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                             double* pVal/*[out,retval]*/);
  double          __fastcall TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall get_SWRemote(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SWRemote(void);
  HRESULT         __fastcall set_SWRemote(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FlashVars(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FlashVars(void);
  HRESULT         __fastcall set_FlashVars(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowScriptAccess(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowScriptAccess(void);
  HRESULT         __fastcall set_AllowScriptAccess(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MovieData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MovieData(void);
  HRESULT         __fastcall set_MovieData(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InlineData(LPUNKNOWN* ppIUnknown/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_InlineData(void);
  HRESULT         __fastcall set_InlineData(LPUNKNOWN ppIUnknown/*[in]*/);
  HRESULT         __fastcall get_SeamlessTabbing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SeamlessTabbing(void);
  HRESULT         __fastcall set_SeamlessTabbing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall EnforceLocalSecurity(void);
  HRESULT         __fastcall get_Profile(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Profile(void);
  HRESULT         __fastcall set_Profile(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ProfileAddress(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ProfileAddress(void);
  HRESULT         __fastcall set_ProfileAddress(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ProfilePort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ProfilePort(void);
  HRESULT         __fastcall set_ProfilePort(long pVal/*[in]*/);
  HRESULT         __fastcall CallFunction(BSTR request/*[in]*/, BSTR* response/*[out,retval]*/);
  BSTR            __fastcall CallFunction(BSTR request/*[in]*/);
  HRESULT         __fastcall SetReturnValue(BSTR returnValue/*[in]*/);
  HRESULT         __fastcall DisableLocalSecurity(void);
  HRESULT         __fastcall get_AllowNetworking(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowNetworking(void);
  HRESULT         __fastcall set_AllowNetworking(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowFullScreen(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowFullScreen(void);
  HRESULT         __fastcall set_AllowFullScreen(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowFullScreenInteractive(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowFullScreenInteractive(void);
  HRESULT         __fastcall set_AllowFullScreenInteractive(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IsDependent(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDependent(void);
  HRESULT         __fastcall set_IsDependent(VARIANT_BOOL pVal/*[in]*/);

  __property   long            ReadyState = {read = get_ReadyState};
  __property   long            TotalFrames = {read = get_TotalFrames};
  __property   VARIANT_BOOL    Playing = {read = get_Playing, write = set_Playing};
  __property   int             Quality = {read = get_Quality, write = set_Quality};
  __property   int             ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   int             AlignMode = {read = get_AlignMode, write = set_AlignMode};
  __property   long            BackgroundColor = {read = get_BackgroundColor, write = set_BackgroundColor};
  __property   VARIANT_BOOL    Loop = {read = get_Loop, write = set_Loop};
  __property   BSTR            Movie = {read = get_Movie, write = set_Movie};
  __property   long            FrameNum = {read = get_FrameNum, write = set_FrameNum};
  __property   BSTR            WMode = {read = get_WMode, write = set_WMode};
  __property   BSTR            SAlign = {read = get_SAlign, write = set_SAlign};
  __property   VARIANT_BOOL    Menu = {read = get_Menu, write = set_Menu};
  __property   BSTR            Base = {read = get_Base, write = set_Base};
  __property   BSTR            Scale = {read = get_Scale, write = set_Scale};
  __property   VARIANT_BOOL    DeviceFont = {read = get_DeviceFont, write = set_DeviceFont};
  __property   VARIANT_BOOL    EmbedMovie = {read = get_EmbedMovie, write = set_EmbedMovie};
  __property   BSTR            BGColor = {read = get_BGColor, write = set_BGColor};
  __property   BSTR            Quality2 = {read = get_Quality2, write = set_Quality2};
  __property   BSTR            SWRemote = {read = get_SWRemote, write = set_SWRemote};
  __property   BSTR            FlashVars = {read = get_FlashVars, write = set_FlashVars};
  __property   BSTR            AllowScriptAccess = {read = get_AllowScriptAccess, write = set_AllowScriptAccess};
  __property   BSTR            MovieData = {read = get_MovieData, write = set_MovieData};
  __property   LPUNKNOWN       InlineData = {read = get_InlineData, write = set_InlineData};
  __property   VARIANT_BOOL    SeamlessTabbing = {read = get_SeamlessTabbing, write = set_SeamlessTabbing};
  __property   VARIANT_BOOL    Profile = {read = get_Profile, write = set_Profile};
  __property   BSTR            ProfileAddress = {read = get_ProfileAddress, write = set_ProfileAddress};
  __property   long            ProfilePort = {read = get_ProfilePort, write = set_ProfilePort};
  __property   BSTR            AllowNetworking = {read = get_AllowNetworking, write = set_AllowNetworking};
  __property   BSTR            AllowFullScreen = {read = get_AllowFullScreen, write = set_AllowFullScreen};
  __property   BSTR            AllowFullScreenInteractive = {read = get_AllowFullScreenInteractive, write = set_AllowFullScreenInteractive};
  __property   VARIANT_BOOL    IsDependent = {read = get_IsDependent, write = set_IsDependent};
};
typedef TCOMIShockwaveFlashT<IShockwaveFlash> TCOMIShockwaveFlash;

// *********************************************************************//
// DispIntf:  IShockwaveFlash
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D27CDB6C-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
template<class T>
class IShockwaveFlashDispT : public TAutoDriver<IShockwaveFlash>
{
public:
  IShockwaveFlashDispT(){}

  IShockwaveFlashDispT(IShockwaveFlash *pintf)
  {
    TAutoDriver<IShockwaveFlash>::Bind(pintf, false);
  }

  IShockwaveFlashDispT(IShockwaveFlashPtr pintf)
  {
    TAutoDriver<IShockwaveFlash>::Bind(pintf, true);
  }

  IShockwaveFlashDispT& operator=(IShockwaveFlash *pintf)
  {
    TAutoDriver<IShockwaveFlash>::Bind(pintf, false);
    return *this;
  }

  IShockwaveFlashDispT& operator=(IShockwaveFlashPtr pintf)
  {
    TAutoDriver<IShockwaveFlash>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ShockwaveFlash));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ShockwaveFlash);
  }

  HRESULT         __fastcall get_ReadyState(long* pVal/*[out,retval]*/);
  long            __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_TotalFrames(long* pVal/*[out,retval]*/);
  long            __fastcall get_TotalFrames(void);
  HRESULT         __fastcall get_Playing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Playing(void);
  HRESULT         __fastcall set_Playing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Quality(int* pVal/*[out,retval]*/);
  int             __fastcall get_Quality(void);
  HRESULT         __fastcall set_Quality(int pVal/*[in]*/);
  HRESULT         __fastcall get_ScaleMode(int* pVal/*[out,retval]*/);
  int             __fastcall get_ScaleMode(void);
  HRESULT         __fastcall set_ScaleMode(int pVal/*[in]*/);
  HRESULT         __fastcall get_AlignMode(int* pVal/*[out,retval]*/);
  int             __fastcall get_AlignMode(void);
  HRESULT         __fastcall set_AlignMode(int pVal/*[in]*/);
  HRESULT         __fastcall get_BackgroundColor(long* pVal/*[out,retval]*/);
  long            __fastcall get_BackgroundColor(void);
  HRESULT         __fastcall set_BackgroundColor(long pVal/*[in]*/);
  HRESULT         __fastcall get_Loop(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Loop(void);
  HRESULT         __fastcall set_Loop(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Movie(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Movie(void);
  HRESULT         __fastcall set_Movie(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FrameNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_FrameNum(void);
  HRESULT         __fastcall set_FrameNum(long pVal/*[in]*/);
  HRESULT         __fastcall SetZoomRect(long left/*[in]*/, long top/*[in]*/, long right/*[in]*/, 
                                         long bottom/*[in]*/);
  HRESULT         __fastcall Zoom(int factor/*[in]*/);
  HRESULT         __fastcall Pan(long x/*[in]*/, long y/*[in]*/, int mode/*[in]*/);
  HRESULT         __fastcall Play();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall Back();
  HRESULT         __fastcall Forward();
  HRESULT         __fastcall Rewind();
  HRESULT         __fastcall StopPlay();
  HRESULT         __fastcall GotoFrame(long FrameNum/*[in]*/);
  HRESULT         __fastcall CurrentFrame(long* FrameNum/*[out,retval]*/);
  long            __fastcall CurrentFrame(void);
  HRESULT         __fastcall IsPlaying(VARIANT_BOOL* Playing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsPlaying(void);
  HRESULT         __fastcall PercentLoaded(long* percent/*[out,retval]*/);
  long            __fastcall PercentLoaded(void);
  HRESULT         __fastcall FrameLoaded(long FrameNum/*[in]*/, VARIANT_BOOL* loaded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall FrameLoaded(long FrameNum/*[in]*/);
  HRESULT         __fastcall FlashVersion(long* version/*[out,retval]*/);
  long            __fastcall FlashVersion(void);
  HRESULT         __fastcall get_WMode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_WMode(void);
  HRESULT         __fastcall set_WMode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SAlign(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SAlign(void);
  HRESULT         __fastcall set_SAlign(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Menu(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Menu(void);
  HRESULT         __fastcall set_Menu(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Base(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Base(void);
  HRESULT         __fastcall set_Base(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Scale(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Scale(void);
  HRESULT         __fastcall set_Scale(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DeviceFont(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DeviceFont(void);
  HRESULT         __fastcall set_DeviceFont(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_EmbedMovie(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EmbedMovie(void);
  HRESULT         __fastcall set_EmbedMovie(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BGColor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BGColor(void);
  HRESULT         __fastcall set_BGColor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Quality2(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Quality2(void);
  HRESULT         __fastcall set_Quality2(BSTR pVal/*[in]*/);
  HRESULT         __fastcall LoadMovie(int layer/*[in]*/, BSTR url/*[in]*/);
  HRESULT         __fastcall TGotoFrame(BSTR target/*[in]*/, long FrameNum/*[in]*/);
  HRESULT         __fastcall TGotoLabel(BSTR target/*[in]*/, BSTR label/*[in]*/);
  HRESULT         __fastcall TCurrentFrame(BSTR target/*[in]*/, long* FrameNum/*[out,retval]*/);
  long            __fastcall TCurrentFrame(BSTR target/*[in]*/);
  HRESULT         __fastcall TCurrentLabel(BSTR target/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall TCurrentLabel(BSTR target/*[in]*/);
  HRESULT         __fastcall TPlay(BSTR target/*[in]*/);
  HRESULT         __fastcall TStopPlay(BSTR target/*[in]*/);
  HRESULT         __fastcall SetVariable(BSTR name/*[in]*/, BSTR value/*[in]*/);
  HRESULT         __fastcall GetVariable(BSTR name/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GetVariable(BSTR name/*[in]*/);
  HRESULT         __fastcall TSetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                          BSTR value/*[in]*/);
  HRESULT         __fastcall TGetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                          BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall TGetProperty(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall TCallFrame(BSTR target/*[in]*/, int FrameNum/*[in]*/);
  HRESULT         __fastcall TCallLabel(BSTR target/*[in]*/, BSTR label/*[in]*/);
  HRESULT         __fastcall TSetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                             double value/*[in]*/);
  HRESULT         __fastcall TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                             double* pVal/*[out,retval]*/);
  double          __fastcall TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/);
  HRESULT         __fastcall get_SWRemote(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SWRemote(void);
  HRESULT         __fastcall set_SWRemote(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FlashVars(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FlashVars(void);
  HRESULT         __fastcall set_FlashVars(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowScriptAccess(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowScriptAccess(void);
  HRESULT         __fastcall set_AllowScriptAccess(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MovieData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MovieData(void);
  HRESULT         __fastcall set_MovieData(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InlineData(LPUNKNOWN* ppIUnknown/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_InlineData(void);
  HRESULT         __fastcall set_InlineData(LPUNKNOWN ppIUnknown/*[in]*/);
  HRESULT         __fastcall get_SeamlessTabbing(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SeamlessTabbing(void);
  HRESULT         __fastcall set_SeamlessTabbing(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall EnforceLocalSecurity();
  HRESULT         __fastcall get_Profile(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Profile(void);
  HRESULT         __fastcall set_Profile(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ProfileAddress(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ProfileAddress(void);
  HRESULT         __fastcall set_ProfileAddress(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ProfilePort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ProfilePort(void);
  HRESULT         __fastcall set_ProfilePort(long pVal/*[in]*/);
  HRESULT         __fastcall CallFunction(BSTR request/*[in]*/, BSTR* response/*[out,retval]*/);
  BSTR            __fastcall CallFunction(BSTR request/*[in]*/);
  HRESULT         __fastcall SetReturnValue(BSTR returnValue/*[in]*/);
  HRESULT         __fastcall DisableLocalSecurity();
  HRESULT         __fastcall get_AllowNetworking(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowNetworking(void);
  HRESULT         __fastcall set_AllowNetworking(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowFullScreen(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowFullScreen(void);
  HRESULT         __fastcall set_AllowFullScreen(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AllowFullScreenInteractive(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AllowFullScreenInteractive(void);
  HRESULT         __fastcall set_AllowFullScreenInteractive(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IsDependent(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDependent(void);
  HRESULT         __fastcall set_IsDependent(VARIANT_BOOL pVal/*[in]*/);

  __property   long            ReadyState = {read = get_ReadyState};
  __property   long            TotalFrames = {read = get_TotalFrames};
  __property   VARIANT_BOOL    Playing = {read = get_Playing, write = set_Playing};
  __property   int             Quality = {read = get_Quality, write = set_Quality};
  __property   int             ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   int             AlignMode = {read = get_AlignMode, write = set_AlignMode};
  __property   long            BackgroundColor = {read = get_BackgroundColor, write = set_BackgroundColor};
  __property   VARIANT_BOOL    Loop = {read = get_Loop, write = set_Loop};
  __property   BSTR            Movie = {read = get_Movie, write = set_Movie};
  __property   long            FrameNum = {read = get_FrameNum, write = set_FrameNum};
  __property   BSTR            WMode = {read = get_WMode, write = set_WMode};
  __property   BSTR            SAlign = {read = get_SAlign, write = set_SAlign};
  __property   VARIANT_BOOL    Menu = {read = get_Menu, write = set_Menu};
  __property   BSTR            Base = {read = get_Base, write = set_Base};
  __property   BSTR            Scale = {read = get_Scale, write = set_Scale};
  __property   VARIANT_BOOL    DeviceFont = {read = get_DeviceFont, write = set_DeviceFont};
  __property   VARIANT_BOOL    EmbedMovie = {read = get_EmbedMovie, write = set_EmbedMovie};
  __property   BSTR            BGColor = {read = get_BGColor, write = set_BGColor};
  __property   BSTR            Quality2 = {read = get_Quality2, write = set_Quality2};
  __property   BSTR            SWRemote = {read = get_SWRemote, write = set_SWRemote};
  __property   BSTR            FlashVars = {read = get_FlashVars, write = set_FlashVars};
  __property   BSTR            AllowScriptAccess = {read = get_AllowScriptAccess, write = set_AllowScriptAccess};
  __property   BSTR            MovieData = {read = get_MovieData, write = set_MovieData};
  __property   LPUNKNOWN       InlineData = {read = get_InlineData, write = set_InlineData};
  __property   VARIANT_BOOL    SeamlessTabbing = {read = get_SeamlessTabbing, write = set_SeamlessTabbing};
  __property   VARIANT_BOOL    Profile = {read = get_Profile, write = set_Profile};
  __property   BSTR            ProfileAddress = {read = get_ProfileAddress, write = set_ProfileAddress};
  __property   long            ProfilePort = {read = get_ProfilePort, write = set_ProfilePort};
  __property   BSTR            AllowNetworking = {read = get_AllowNetworking, write = set_AllowNetworking};
  __property   BSTR            AllowFullScreen = {read = get_AllowFullScreen, write = set_AllowFullScreen};
  __property   BSTR            AllowFullScreenInteractive = {read = get_AllowFullScreenInteractive, write = set_AllowFullScreenInteractive};
  __property   VARIANT_BOOL    IsDependent = {read = get_IsDependent, write = set_IsDependent};
};
typedef IShockwaveFlashDispT<IShockwaveFlash> IShockwaveFlashDisp;

typedef TComInterface<ICanHandleException>  TCOMICanHandleException;

// *********************************************************************//
// DispIntf:  _IShockwaveFlashEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D27CDB6D-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
template <class T>
class _IShockwaveFlashEventsDispT : public TAutoDriver<_IShockwaveFlashEvents>
{
public:
  _IShockwaveFlashEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnReadyStateChange(long newState);
  void            __fastcall OnProgress(long percentDone);
  void            __fastcall FSCommand(BSTR command/*[in]*/, BSTR args/*[in]*/);
  void            __fastcall FlashCall(BSTR request/*[in]*/);

};
typedef _IShockwaveFlashEventsDispT<_IShockwaveFlashEvents> _IShockwaveFlashEventsDisp;

typedef TComInterface<IFlashFactory>  TCOMIFlashFactory;

// *********************************************************************//
// DispIntf:  IDispatchEx
// Flags:     (4096) Dispatchable
// GUID:      {A6EF9860-C720-11D0-9337-00A0C90DCAA9}
// *********************************************************************//
template<class T>
class IDispatchExDispT : public TAutoDriver<IDispatchEx>
{
public:
  IDispatchExDispT(){}

  IDispatchExDispT(IDispatchEx *pintf)
  {
    TAutoDriver<IDispatchEx>::Bind(pintf, false);
  }

  IDispatchExDispT(IDispatchExPtr pintf)
  {
    TAutoDriver<IDispatchEx>::Bind(pintf, true);
  }

  IDispatchExDispT& operator=(IDispatchEx *pintf)
  {
    TAutoDriver<IDispatchEx>::Bind(pintf, false);
    return *this;
  }

  IDispatchExDispT& operator=(IDispatchExPtr pintf)
  {
    TAutoDriver<IDispatchEx>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetDispID(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/, 
                                       long* pid/*[out]*/);
  HRESULT         __fastcall RemoteInvokeEx(long id/*[in]*/, unsigned_long lcid/*[in]*/, 
                                            unsigned_long dwFlags/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(DISPPARAMS* pdp)*/ VARIANT  pdp, 
                                            VARIANT* pvarRes/*[out]*/, 
                                            /*AUTO_PARAM_ERROR(EXCEPINFO* pei)*/ VARIANT  pei, 
                                            Shockwaveflashobjects_tlb::IServiceProvider* pspCaller/*[in]*/
                                            , unsigned cvarRefArg/*[in]*/, 
                                            unsigned* rgiRefArg/*[in]*/, 
                                            VARIANT* rgvarRefArg/*[in,out]*/);
  HRESULT         __fastcall DeleteMemberByName(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/);
  HRESULT         __fastcall DeleteMemberByDispID(long id/*[in]*/);
  HRESULT         __fastcall GetMemberProperties(long id/*[in]*/, unsigned_long grfdexFetch/*[in]*/
                                                 , unsigned_long* pgrfdex/*[out]*/);
  HRESULT         __fastcall GetMemberName(long id/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT         __fastcall GetNextDispID(unsigned_long grfdex/*[in]*/, long id/*[in]*/, 
                                           long* pid/*[out]*/);
  HRESULT         __fastcall GetNameSpaceParent(LPUNKNOWN* ppunk/*[out]*/);

};
typedef IDispatchExDispT<IDispatchEx> IDispatchExDisp;

// *********************************************************************//
// DispIntf:  IFlashObjectInterface
// Flags:     (4096) Dispatchable
// GUID:      {D27CDB72-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
template<class T>
class IFlashObjectInterfaceDispT : public TAutoDriver<IFlashObjectInterface>
{
public:
  IFlashObjectInterfaceDispT(){}

  IFlashObjectInterfaceDispT(IFlashObjectInterface *pintf)
  {
    TAutoDriver<IFlashObjectInterface>::Bind(pintf, false);
  }

  IFlashObjectInterfaceDispT(IFlashObjectInterfacePtr pintf)
  {
    TAutoDriver<IFlashObjectInterface>::Bind(pintf, true);
  }

  IFlashObjectInterfaceDispT& operator=(IFlashObjectInterface *pintf)
  {
    TAutoDriver<IFlashObjectInterface>::Bind(pintf, false);
    return *this;
  }

  IFlashObjectInterfaceDispT& operator=(IFlashObjectInterfacePtr pintf)
  {
    TAutoDriver<IFlashObjectInterface>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FlashObjectInterface));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FlashObjectInterface);
  }

  HRESULT         __fastcall GetDispID(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/, 
                                       long* pid/*[out]*/);
  HRESULT         __fastcall RemoteInvokeEx(long id/*[in]*/, unsigned_long lcid/*[in]*/, 
                                            unsigned_long dwFlags/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(DISPPARAMS* pdp)*/ VARIANT  pdp, 
                                            VARIANT* pvarRes/*[out]*/, 
                                            /*AUTO_PARAM_ERROR(EXCEPINFO* pei)*/ VARIANT  pei, 
                                            Shockwaveflashobjects_tlb::IServiceProvider* pspCaller/*[in]*/
                                            , unsigned cvarRefArg/*[in]*/, 
                                            unsigned* rgiRefArg/*[in]*/, 
                                            VARIANT* rgvarRefArg/*[in,out]*/);
  HRESULT         __fastcall DeleteMemberByName(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/);
  HRESULT         __fastcall DeleteMemberByDispID(long id/*[in]*/);
  HRESULT         __fastcall GetMemberProperties(long id/*[in]*/, unsigned_long grfdexFetch/*[in]*/
                                                 , unsigned_long* pgrfdex/*[out]*/);
  HRESULT         __fastcall GetMemberName(long id/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT         __fastcall GetNextDispID(unsigned_long grfdex/*[in]*/, long id/*[in]*/, 
                                           long* pid/*[out]*/);
  HRESULT         __fastcall GetNameSpaceParent(LPUNKNOWN* ppunk/*[out]*/);


};
typedef IFlashObjectInterfaceDispT<IFlashObjectInterface> IFlashObjectInterfaceDisp;

typedef TComInterface<IServiceProvider>  TCOMIServiceProvider;

// *********************************************************************//
// SmartIntf: TCOMIFlashObject
// Interface: IFlashObject
// *********************************************************************//
template <class T /* IFlashObject */ >
class TCOMIFlashObjectT : public TComInterface<IFlashObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFlashObjectT() {}
  TCOMIFlashObjectT(IFlashObject *intf, bool addRef = false) : TComInterface<IFlashObject>(intf, addRef) {}
  TCOMIFlashObjectT(const TCOMIFlashObjectT& src) : TComInterface<IFlashObject>(src) {}
  TCOMIFlashObjectT& operator=(const TCOMIFlashObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOMIFlashObjectT<IFlashObject> TCOMIFlashObject;

// *********************************************************************//
// DispIntf:  IFlashObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86230738-D762-4C50-A2DE-A753E5B1686F}
// *********************************************************************//
template<class T>
class IFlashObjectDispT : public TAutoDriver<IFlashObject>
{
public:
  IFlashObjectDispT(){}

  IFlashObjectDispT(IFlashObject *pintf)
  {
    TAutoDriver<IFlashObject>::Bind(pintf, false);
  }

  IFlashObjectDispT(IFlashObjectPtr pintf)
  {
    TAutoDriver<IFlashObject>::Bind(pintf, true);
  }

  IFlashObjectDispT& operator=(IFlashObject *pintf)
  {
    TAutoDriver<IFlashObject>::Bind(pintf, false);
    return *this;
  }

  IFlashObjectDispT& operator=(IFlashObjectPtr pintf)
  {
    TAutoDriver<IFlashObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FlashObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FlashObject);
  }

  HRESULT         __fastcall GetDispID(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/, 
                                       long* pid/*[out]*/);
  HRESULT         __fastcall RemoteInvokeEx(long id/*[in]*/, unsigned_long lcid/*[in]*/, 
                                            unsigned_long dwFlags/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(DISPPARAMS* pdp)*/ VARIANT  pdp, 
                                            VARIANT* pvarRes/*[out]*/, 
                                            /*AUTO_PARAM_ERROR(EXCEPINFO* pei)*/ VARIANT  pei, 
                                            Shockwaveflashobjects_tlb::IServiceProvider* pspCaller/*[in]*/
                                            , unsigned cvarRefArg/*[in]*/, 
                                            unsigned* rgiRefArg/*[in]*/, 
                                            VARIANT* rgvarRefArg/*[in,out]*/);
  HRESULT         __fastcall DeleteMemberByName(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/);
  HRESULT         __fastcall DeleteMemberByDispID(long id/*[in]*/);
  HRESULT         __fastcall GetMemberProperties(long id/*[in]*/, unsigned_long grfdexFetch/*[in]*/
                                                 , unsigned_long* pgrfdex/*[out]*/);
  HRESULT         __fastcall GetMemberName(long id/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT         __fastcall GetNextDispID(unsigned_long grfdex/*[in]*/, long id/*[in]*/, 
                                           long* pid/*[out]*/);
  HRESULT         __fastcall GetNameSpaceParent(LPUNKNOWN* ppunk/*[out]*/);


};
typedef IFlashObjectDispT<IFlashObject> IFlashObjectDisp;

// *********************************************************************//
// SmartIntf: TCOMIShockwaveFlash
// Interface: IShockwaveFlash
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_ReadyState(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ReadyState(pVal);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::get_ReadyState(void)
{
  long pVal;
  OLECHECK(this->get_ReadyState((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_TotalFrames(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TotalFrames(pVal);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::get_TotalFrames(void)
{
  long pVal;
  OLECHECK(this->get_TotalFrames((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Playing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Playing(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_Playing(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Playing((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Playing(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Playing(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Quality(int* pVal/*[out,retval]*/)
{
  return (*this)->get_Quality(pVal);
}

template <class T> int __fastcall
TCOMIShockwaveFlashT<T>::get_Quality(void)
{
  int pVal;
  OLECHECK(this->get_Quality((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Quality(int pVal/*[in]*/)
{
  return (*this)->set_Quality(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_ScaleMode(int* pVal/*[out,retval]*/)
{
  return (*this)->get_ScaleMode(pVal);
}

template <class T> int __fastcall
TCOMIShockwaveFlashT<T>::get_ScaleMode(void)
{
  int pVal;
  OLECHECK(this->get_ScaleMode((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_ScaleMode(int pVal/*[in]*/)
{
  return (*this)->set_ScaleMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_AlignMode(int* pVal/*[out,retval]*/)
{
  return (*this)->get_AlignMode(pVal);
}

template <class T> int __fastcall
TCOMIShockwaveFlashT<T>::get_AlignMode(void)
{
  int pVal;
  OLECHECK(this->get_AlignMode((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_AlignMode(int pVal/*[in]*/)
{
  return (*this)->set_AlignMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_BackgroundColor(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BackgroundColor(pVal);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::get_BackgroundColor(void)
{
  long pVal;
  OLECHECK(this->get_BackgroundColor((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_BackgroundColor(long pVal/*[in]*/)
{
  return (*this)->set_BackgroundColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Loop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Loop(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_Loop(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Loop((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Loop(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Loop(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Movie(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Movie(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_Movie(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Movie((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Movie(BSTR pVal/*[in]*/)
{
  return (*this)->set_Movie(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_FrameNum(long* pVal/*[out,retval]*/)
{
  return (*this)->get_FrameNum(pVal);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::get_FrameNum(void)
{
  long pVal;
  OLECHECK(this->get_FrameNum((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_FrameNum(long pVal/*[in]*/)
{
  return (*this)->set_FrameNum(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::SetZoomRect(long left/*[in]*/, long top/*[in]*/, long right/*[in]*/, 
                                     long bottom/*[in]*/)
{
  return (*this)->SetZoomRect(left, top, right, bottom);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Zoom(int factor/*[in]*/)
{
  return (*this)->Zoom(factor);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Pan(long x/*[in]*/, long y/*[in]*/, int mode/*[in]*/)
{
  return (*this)->Pan(x, y, mode);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Play(void)
{
  return (*this)->Play();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Back(void)
{
  return (*this)->Back();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Forward(void)
{
  return (*this)->Forward();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::Rewind(void)
{
  return (*this)->Rewind();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::StopPlay(void)
{
  return (*this)->StopPlay();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::GotoFrame(long FrameNum/*[in]*/)
{
  return (*this)->GotoFrame(FrameNum);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::CurrentFrame(long* FrameNum/*[out,retval]*/)
{
  return (*this)->CurrentFrame(FrameNum);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::CurrentFrame(void)
{
  long FrameNum;
  OLECHECK(this->CurrentFrame((long*)&FrameNum));
  return FrameNum;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::IsPlaying(VARIANT_BOOL* Playing/*[out,retval]*/)
{
  return (*this)->IsPlaying(Playing);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::IsPlaying(void)
{
  VARIANT_BOOL Playing;
  OLECHECK(this->IsPlaying((VARIANT_BOOL*)&Playing));
  return Playing;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::PercentLoaded(long* percent/*[out,retval]*/)
{
  return (*this)->PercentLoaded(percent);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::PercentLoaded(void)
{
  long percent;
  OLECHECK(this->PercentLoaded((long*)&percent));
  return percent;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::FrameLoaded(long FrameNum/*[in]*/, VARIANT_BOOL* loaded/*[out,retval]*/)
{
  return (*this)->FrameLoaded(FrameNum, loaded);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::FrameLoaded(long FrameNum/*[in]*/)
{
  VARIANT_BOOL loaded;
  OLECHECK(this->FrameLoaded(FrameNum/*[in]*/, (VARIANT_BOOL*)&loaded));
  return loaded;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::FlashVersion(long* version/*[out,retval]*/)
{
  return (*this)->FlashVersion(version);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::FlashVersion(void)
{
  long version;
  OLECHECK(this->FlashVersion((long*)&version));
  return version;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_WMode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_WMode(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_WMode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_WMode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_WMode(BSTR pVal/*[in]*/)
{
  return (*this)->set_WMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_SAlign(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SAlign(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_SAlign(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SAlign((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_SAlign(BSTR pVal/*[in]*/)
{
  return (*this)->set_SAlign(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Menu(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Menu(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_Menu(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Menu((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Menu(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Menu(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Base(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Base(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_Base(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Base((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Base(BSTR pVal/*[in]*/)
{
  return (*this)->set_Base(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Scale(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Scale(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_Scale(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Scale((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Scale(BSTR pVal/*[in]*/)
{
  return (*this)->set_Scale(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_DeviceFont(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DeviceFont(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_DeviceFont(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DeviceFont((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_DeviceFont(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DeviceFont(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_EmbedMovie(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_EmbedMovie(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_EmbedMovie(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_EmbedMovie((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_EmbedMovie(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_EmbedMovie(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_BGColor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_BGColor(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_BGColor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_BGColor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_BGColor(BSTR pVal/*[in]*/)
{
  return (*this)->set_BGColor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Quality2(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Quality2(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_Quality2(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Quality2((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Quality2(BSTR pVal/*[in]*/)
{
  return (*this)->set_Quality2(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::LoadMovie(int layer/*[in]*/, BSTR url/*[in]*/)
{
  return (*this)->LoadMovie(layer, url);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TGotoFrame(BSTR target/*[in]*/, long FrameNum/*[in]*/)
{
  return (*this)->TGotoFrame(target, FrameNum);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TGotoLabel(BSTR target/*[in]*/, BSTR label/*[in]*/)
{
  return (*this)->TGotoLabel(target, label);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TCurrentFrame(BSTR target/*[in]*/, long* FrameNum/*[out,retval]*/)
{
  return (*this)->TCurrentFrame(target, FrameNum);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::TCurrentFrame(BSTR target/*[in]*/)
{
  long FrameNum;
  OLECHECK(this->TCurrentFrame(target/*[in]*/, (long*)&FrameNum));
  return FrameNum;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TCurrentLabel(BSTR target/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->TCurrentLabel(target, pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::TCurrentLabel(BSTR target/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->TCurrentLabel(target/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TPlay(BSTR target/*[in]*/)
{
  return (*this)->TPlay(target);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TStopPlay(BSTR target/*[in]*/)
{
  return (*this)->TStopPlay(target);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::SetVariable(BSTR name/*[in]*/, BSTR value/*[in]*/)
{
  return (*this)->SetVariable(name, value);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::GetVariable(BSTR name/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->GetVariable(name, pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::GetVariable(BSTR name/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->GetVariable(name/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TSetProperty(BSTR target/*[in]*/, int property/*[in]*/, BSTR value/*[in]*/)
{
  return (*this)->TSetProperty(target, property, value);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TGetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  return (*this)->TGetProperty(target, property, pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::TGetProperty(BSTR target/*[in]*/, int property/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->TGetProperty(target/*[in]*/, property/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TCallFrame(BSTR target/*[in]*/, int FrameNum/*[in]*/)
{
  return (*this)->TCallFrame(target, FrameNum);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TCallLabel(BSTR target/*[in]*/, BSTR label/*[in]*/)
{
  return (*this)->TCallLabel(target, label);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TSetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                         double value/*[in]*/)
{
  return (*this)->TSetPropertyNum(target, property, value);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                         double* pVal/*[out,retval]*/)
{
  return (*this)->TGetPropertyNum(target, property, pVal);
}

template <class T> double __fastcall
TCOMIShockwaveFlashT<T>::TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/)
{
  double pVal;
  OLECHECK(this->TGetPropertyNum(target/*[in]*/, property/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/, 
                                              double* pVal/*[out,retval]*/)
{
  return (*this)->TGetPropertyAsNumber(target, property, pVal);
}

template <class T> double __fastcall
TCOMIShockwaveFlashT<T>::TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/)
{
  double pVal;
  OLECHECK(this->TGetPropertyAsNumber(target/*[in]*/, property/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_SWRemote(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SWRemote(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_SWRemote(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SWRemote((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_SWRemote(BSTR pVal/*[in]*/)
{
  return (*this)->set_SWRemote(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_FlashVars(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FlashVars(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_FlashVars(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FlashVars((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_FlashVars(BSTR pVal/*[in]*/)
{
  return (*this)->set_FlashVars(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_AllowScriptAccess(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AllowScriptAccess(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_AllowScriptAccess(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AllowScriptAccess((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_AllowScriptAccess(BSTR pVal/*[in]*/)
{
  return (*this)->set_AllowScriptAccess(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_MovieData(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_MovieData(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_MovieData(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_MovieData((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_MovieData(BSTR pVal/*[in]*/)
{
  return (*this)->set_MovieData(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_InlineData(LPUNKNOWN* ppIUnknown/*[out,retval]*/)
{
  return (*this)->get_InlineData(ppIUnknown);
}

template <class T> LPUNKNOWN __fastcall
TCOMIShockwaveFlashT<T>::get_InlineData(void)
{
  LPUNKNOWN ppIUnknown;
  OLECHECK(this->get_InlineData((LPUNKNOWN*)&ppIUnknown));
  return ppIUnknown;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_InlineData(LPUNKNOWN ppIUnknown/*[in]*/)
{
  return (*this)->set_InlineData(ppIUnknown);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_SeamlessTabbing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SeamlessTabbing(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_SeamlessTabbing(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SeamlessTabbing((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_SeamlessTabbing(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SeamlessTabbing(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::EnforceLocalSecurity(void)
{
  return (*this)->EnforceLocalSecurity();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_Profile(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Profile(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_Profile(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Profile((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_Profile(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Profile(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_ProfileAddress(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ProfileAddress(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_ProfileAddress(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ProfileAddress((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_ProfileAddress(BSTR pVal/*[in]*/)
{
  return (*this)->set_ProfileAddress(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_ProfilePort(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ProfilePort(pVal);
}

template <class T> long __fastcall
TCOMIShockwaveFlashT<T>::get_ProfilePort(void)
{
  long pVal;
  OLECHECK(this->get_ProfilePort((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_ProfilePort(long pVal/*[in]*/)
{
  return (*this)->set_ProfilePort(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::CallFunction(BSTR request/*[in]*/, BSTR* response/*[out,retval]*/)
{
  return (*this)->CallFunction(request, response);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::CallFunction(BSTR request/*[in]*/)
{
  BSTR response = 0;
  OLECHECK(this->CallFunction(request/*[in]*/, (BSTR*)&response));
  return response;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::SetReturnValue(BSTR returnValue/*[in]*/)
{
  return (*this)->SetReturnValue(returnValue);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::DisableLocalSecurity(void)
{
  return (*this)->DisableLocalSecurity();
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_AllowNetworking(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AllowNetworking(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_AllowNetworking(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AllowNetworking((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_AllowNetworking(BSTR pVal/*[in]*/)
{
  return (*this)->set_AllowNetworking(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_AllowFullScreen(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AllowFullScreen(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_AllowFullScreen(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AllowFullScreen((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_AllowFullScreen(BSTR pVal/*[in]*/)
{
  return (*this)->set_AllowFullScreen(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_AllowFullScreenInteractive(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AllowFullScreenInteractive(pVal);
}

template <class T> BSTR __fastcall
TCOMIShockwaveFlashT<T>::get_AllowFullScreenInteractive(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AllowFullScreenInteractive((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_AllowFullScreenInteractive(BSTR pVal/*[in]*/)
{
  return (*this)->set_AllowFullScreenInteractive(pVal);
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::get_IsDependent(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsDependent(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIShockwaveFlashT<T>::get_IsDependent(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsDependent((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIShockwaveFlashT<T>::set_IsDependent(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsDependent(pVal);
}

// *********************************************************************//
// DispIntf:  IShockwaveFlash
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D27CDB6C-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_ReadyState(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::get_ReadyState(void)
{
  long pVal;
  this->get_ReadyState((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_TotalFrames(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalFrames"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::get_TotalFrames(void)
{
  long pVal;
  this->get_TotalFrames((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Playing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playing"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_Playing(void)
{
  VARIANT_BOOL pVal;
  this->get_Playing((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Playing(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Playing"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Quality(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quality"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IShockwaveFlashDispT<T>::get_Quality(void)
{
  int pVal;
  this->get_Quality((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Quality(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quality"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_ScaleMode(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleMode"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IShockwaveFlashDispT<T>::get_ScaleMode(void)
{
  int pVal;
  this->get_ScaleMode((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_ScaleMode(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleMode"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_AlignMode(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignMode"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IShockwaveFlashDispT<T>::get_AlignMode(void)
{
  int pVal;
  this->get_AlignMode((int*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_AlignMode(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignMode"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_BackgroundColor(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackgroundColor"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::get_BackgroundColor(void)
{
  long pVal;
  this->get_BackgroundColor((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_BackgroundColor(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackgroundColor"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Loop(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loop"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_Loop(void)
{
  VARIANT_BOOL pVal;
  this->get_Loop((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Loop(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loop"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Movie(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Movie"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_Movie(void)
{
  BSTR pVal;
  this->get_Movie((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Movie(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Movie"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_FrameNum(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameNum"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::get_FrameNum(void)
{
  long pVal;
  this->get_FrameNum((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_FrameNum(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameNum"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::SetZoomRect(long left/*[in]*/, long top/*[in]*/, long right/*[in]*/, 
                                     long bottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetZoomRect"), DISPID(109));
  TAutoArgs<4> _args;
  _args[1] = left /*[VT_I4:0]*/;
  _args[2] = top /*[VT_I4:0]*/;
  _args[3] = right /*[VT_I4:0]*/;
  _args[4] = bottom /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Zoom(int factor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = factor /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Pan(long x/*[in]*/, long y/*[in]*/, int mode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pan"), DISPID(119));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = mode /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(112));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(113));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Back()
{
  _TDispID _dispid(*this, OLETEXT("Back"), DISPID(114));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Forward()
{
  _TDispID _dispid(*this, OLETEXT("Forward"), DISPID(115));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::Rewind()
{
  _TDispID _dispid(*this, OLETEXT("Rewind"), DISPID(116));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::StopPlay()
{
  _TDispID _dispid(*this, OLETEXT("StopPlay"), DISPID(126));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::GotoFrame(long FrameNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoFrame"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = FrameNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::CurrentFrame(long* FrameNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentFrame"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FrameNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::CurrentFrame(void)
{
  long FrameNum;
  this->CurrentFrame((long*)&FrameNum);
  return FrameNum;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::IsPlaying(VARIANT_BOOL* Playing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPlaying"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Playing /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::IsPlaying(void)
{
  VARIANT_BOOL Playing;
  this->IsPlaying((VARIANT_BOOL*)&Playing);
  return Playing;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::PercentLoaded(long* percent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PercentLoaded"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(percent /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::PercentLoaded(void)
{
  long percent;
  this->PercentLoaded((long*)&percent);
  return percent;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::FrameLoaded(long FrameNum/*[in]*/, VARIANT_BOOL* loaded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameLoaded"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = FrameNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(loaded /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::FrameLoaded(long FrameNum/*[in]*/)
{
  VARIANT_BOOL loaded;
  this->FrameLoaded(FrameNum, (VARIANT_BOOL*)&loaded);
  return loaded;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::FlashVersion(long* version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FlashVersion"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(version /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::FlashVersion(void)
{
  long version;
  this->FlashVersion((long*)&version);
  return version;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_WMode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WMode"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_WMode(void)
{
  BSTR pVal;
  this->get_WMode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_WMode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WMode"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_SAlign(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAlign"), DISPID(134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_SAlign(void)
{
  BSTR pVal;
  this->get_SAlign((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_SAlign(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAlign"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Menu(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Menu"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_Menu(void)
{
  VARIANT_BOOL pVal;
  this->get_Menu((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Menu(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Menu"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Base(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Base"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_Base(void)
{
  BSTR pVal;
  this->get_Base((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Base(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Base"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Scale(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scale"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_Scale(void)
{
  BSTR pVal;
  this->get_Scale((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Scale(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scale"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_DeviceFont(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeviceFont"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_DeviceFont(void)
{
  VARIANT_BOOL pVal;
  this->get_DeviceFont((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_DeviceFont(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeviceFont"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_EmbedMovie(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmbedMovie"), DISPID(139));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_EmbedMovie(void)
{
  VARIANT_BOOL pVal;
  this->get_EmbedMovie((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_EmbedMovie(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmbedMovie"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_BGColor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BGColor"), DISPID(140));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_BGColor(void)
{
  BSTR pVal;
  this->get_BGColor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_BGColor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BGColor"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Quality2(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quality2"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_Quality2(void)
{
  BSTR pVal;
  this->get_Quality2((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Quality2(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quality2"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::LoadMovie(int layer/*[in]*/, BSTR url/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadMovie"), DISPID(142));
  TAutoArgs<2> _args;
  _args[1] = layer /*[VT_INT:0]*/;
  _args[2] = url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TGotoFrame(BSTR target/*[in]*/, long FrameNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TGotoFrame"), DISPID(143));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = FrameNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TGotoLabel(BSTR target/*[in]*/, BSTR label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TGotoLabel"), DISPID(144));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = label /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TCurrentFrame(BSTR target/*[in]*/, long* FrameNum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TCurrentFrame"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(FrameNum /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::TCurrentFrame(BSTR target/*[in]*/)
{
  long FrameNum;
  this->TCurrentFrame(target, (long*)&FrameNum);
  return FrameNum;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TCurrentLabel(BSTR target/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TCurrentLabel"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::TCurrentLabel(BSTR target/*[in]*/)
{
  BSTR pVal;
  this->TCurrentLabel(target, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TPlay(BSTR target/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TPlay"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TStopPlay(BSTR target/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TStopPlay"), DISPID(148));
  TAutoArgs<1> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::SetVariable(BSTR name/*[in]*/, BSTR value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVariable"), DISPID(151));
  TAutoArgs<2> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::GetVariable(BSTR name/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVariable"), DISPID(152));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::GetVariable(BSTR name/*[in]*/)
{
  BSTR pVal;
  this->GetVariable(name, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TSetProperty(BSTR target/*[in]*/, int property/*[in]*/, BSTR value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TSetProperty"), DISPID(153));
  TAutoArgs<3> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = property /*[VT_INT:0]*/;
  _args[3] = value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TGetProperty(BSTR target/*[in]*/, int property/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TGetProperty"), DISPID(154));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = property /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::TGetProperty(BSTR target/*[in]*/, int property/*[in]*/)
{
  BSTR pVal;
  this->TGetProperty(target, property, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TCallFrame(BSTR target/*[in]*/, int FrameNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TCallFrame"), DISPID(155));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = FrameNum /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TCallLabel(BSTR target/*[in]*/, BSTR label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TCallLabel"), DISPID(156));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = label /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TSetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                         double value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TSetPropertyNum"), DISPID(157));
  TAutoArgs<3> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = property /*[VT_INT:0]*/;
  _args[3] = value /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/, 
                                         double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TGetPropertyNum"), DISPID(158));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = property /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IShockwaveFlashDispT<T>::TGetPropertyNum(BSTR target/*[in]*/, int property/*[in]*/)
{
  double pVal;
  this->TGetPropertyNum(target, property, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/, 
                                              double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TGetPropertyAsNumber"), DISPID(172));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = property /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IShockwaveFlashDispT<T>::TGetPropertyAsNumber(BSTR target/*[in]*/, int property/*[in]*/)
{
  double pVal;
  this->TGetPropertyAsNumber(target, property, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_SWRemote(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SWRemote"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_SWRemote(void)
{
  BSTR pVal;
  this->get_SWRemote((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_SWRemote(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SWRemote"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_FlashVars(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FlashVars"), DISPID(170));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_FlashVars(void)
{
  BSTR pVal;
  this->get_FlashVars((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_FlashVars(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FlashVars"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_AllowScriptAccess(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScriptAccess"), DISPID(171));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_AllowScriptAccess(void)
{
  BSTR pVal;
  this->get_AllowScriptAccess((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_AllowScriptAccess(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScriptAccess"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_MovieData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MovieData"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_MovieData(void)
{
  BSTR pVal;
  this->get_MovieData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_MovieData(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MovieData"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_InlineData(LPUNKNOWN* ppIUnknown/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InlineData"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppIUnknown /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IShockwaveFlashDispT<T>::get_InlineData(void)
{
  LPUNKNOWN ppIUnknown;
  this->get_InlineData((LPUNKNOWN*)&ppIUnknown);
  return ppIUnknown;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_InlineData(LPUNKNOWN ppIUnknown/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InlineData"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = ppIUnknown /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_SeamlessTabbing(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeamlessTabbing"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_SeamlessTabbing(void)
{
  VARIANT_BOOL pVal;
  this->get_SeamlessTabbing((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_SeamlessTabbing(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeamlessTabbing"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::EnforceLocalSecurity()
{
  _TDispID _dispid(*this, OLETEXT("EnforceLocalSecurity"), DISPID(193));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_Profile(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profile"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_Profile(void)
{
  VARIANT_BOOL pVal;
  this->get_Profile((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_Profile(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profile"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_ProfileAddress(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfileAddress"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_ProfileAddress(void)
{
  BSTR pVal;
  this->get_ProfileAddress((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_ProfileAddress(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfileAddress"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_ProfilePort(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfilePort"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShockwaveFlashDispT<T>::get_ProfilePort(void)
{
  long pVal;
  this->get_ProfilePort((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_ProfilePort(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfilePort"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::CallFunction(BSTR request/*[in]*/, BSTR* response/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallFunction"), DISPID(198));
  TAutoArgs<1> _args;
  _args[1] = request /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(response /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::CallFunction(BSTR request/*[in]*/)
{
  BSTR response;
  this->CallFunction(request, (BSTR*)&response);
  return response;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::SetReturnValue(BSTR returnValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetReturnValue"), DISPID(199));
  TAutoArgs<1> _args;
  _args[1] = returnValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::DisableLocalSecurity()
{
  _TDispID _dispid(*this, OLETEXT("DisableLocalSecurity"), DISPID(200));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_AllowNetworking(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowNetworking"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_AllowNetworking(void)
{
  BSTR pVal;
  this->get_AllowNetworking((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_AllowNetworking(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowNetworking"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_AllowFullScreen(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFullScreen"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_AllowFullScreen(void)
{
  BSTR pVal;
  this->get_AllowFullScreen((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_AllowFullScreen(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFullScreen"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_AllowFullScreenInteractive(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFullScreenInteractive"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IShockwaveFlashDispT<T>::get_AllowFullScreenInteractive(void)
{
  BSTR pVal;
  this->get_AllowFullScreenInteractive((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_AllowFullScreenInteractive(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFullScreenInteractive"), DISPID(501));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::get_IsDependent(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDependent"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IShockwaveFlashDispT<T>::get_IsDependent(void)
{
  VARIANT_BOOL pVal;
  this->get_IsDependent((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IShockwaveFlashDispT<T>::set_IsDependent(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDependent"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IShockwaveFlashEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D27CDB6D-AE6D-11CF-96B8-444553540000}
// *********************************************************************//
template <class T> void __fastcall
_IShockwaveFlashEventsDispT<T>::OnReadyStateChange(long newState)
{
  _TDispID _dispid(/* OnReadyStateChange */ DISPID(-609));
  TAutoArgs<1> _args;
  _args[1] = newState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_IShockwaveFlashEventsDispT<T>::OnProgress(long percentDone)
{
  _TDispID _dispid(/* OnProgress */ DISPID(1958));
  TAutoArgs<1> _args;
  _args[1] = percentDone /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_IShockwaveFlashEventsDispT<T>::FSCommand(BSTR command/*[in]*/, BSTR args/*[in]*/)
{
  _TDispID _dispid(/* FSCommand */ DISPID(150));
  TAutoArgs<2> _args;
  _args[1] = command /*[VT_BSTR:0]*/;
  _args[2] = args /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_IShockwaveFlashEventsDispT<T>::FlashCall(BSTR request/*[in]*/)
{
  _TDispID _dispid(/* FlashCall */ DISPID(197));
  TAutoArgs<1> _args;
  _args[1] = request /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIFlashObject
// Interface: IFlashObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IFlashObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86230738-D762-4C50-A2DE-A753E5B1686F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::GetDispID(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/, 
                                long* pid/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDispID"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = grfdex /*[VT_UI4:0]*/;
  _args[3] = pid /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::RemoteInvokeEx(long id/*[in]*/, unsigned_long lcid/*[in]*/, 
                                     unsigned_long dwFlags/*[in]*/, 
                                     /*AUTO_PARAM_ERROR(DISPPARAMS* pdp)*/ VARIANT  pdp, 
                                     VARIANT* pvarRes/*[out]*/, 
                                     /*AUTO_PARAM_ERROR(EXCEPINFO* pei)*/ VARIANT  pei, 
                                     Shockwaveflashobjects_tlb::IServiceProvider* pspCaller/*[in]*/
                                     , unsigned cvarRefArg/*[in]*/, unsigned* rgiRefArg/*[in]*/, 
                                     VARIANT* rgvarRefArg/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteInvokeEx"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<10> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = lcid /*[VT_UI4:0]*/;
  _args[3] = dwFlags /*[VT_UI4:0]*/;
  _args[4] = pdp;
  _args[5] = pvarRes /*[VT_VARIANT:1]*/;
  _args[6] = pei;
  _args[7] = (LPUNKNOWN)(Shockwaveflashobjects_tlb::IServiceProvider*)pspCaller /*[VT_USERDEFINED:1]*/;
  _args[8] = cvarRefArg /*[VT_UINT:0]*/;
  _args[9] = rgiRefArg /*[VT_UINT:1]*/;
  _args[10] = rgvarRefArg /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::DeleteMemberByName(BSTR bstrName/*[in]*/, unsigned_long grfdex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteMemberByName"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = grfdex /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::DeleteMemberByDispID(long id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteMemberByDispID"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::GetMemberProperties(long id/*[in]*/, unsigned_long grfdexFetch/*[in]*/, 
                                          unsigned_long* pgrfdex/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMemberProperties"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<3> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = grfdexFetch /*[VT_UI4:0]*/;
  _args[3] = pgrfdex /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::GetMemberName(long id/*[in]*/, BSTR* pbstrName/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMemberName"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<2> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = pbstrName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::GetNextDispID(unsigned_long grfdex/*[in]*/, long id/*[in]*/, 
                                    long* pid/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextDispID"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<3> _args;
  _args[1] = grfdex /*[VT_UI4:0]*/;
  _args[2] = id /*[VT_I4:0]*/;
  _args[3] = pid /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFlashObjectDispT<T>::GetNameSpaceParent(LPUNKNOWN* ppunk/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNameSpaceParent"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = ppunk /*[VT_UNKNOWN:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FlashObjectInterface
// Interface: IFlashObjectInterfaceDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFlashObjectInterfaceDisp, IFlashObjectInterface, &CLSID_FlashObjectInterface, &IID_IFlashObjectInterface> CoFlashObjectInterface;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FlashObject
// Interface: TCOMIFlashObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFlashObject, IFlashObject, &CLSID_FlashObject, &IID_IFlashObject> CoFlashObject;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ShockwaveFlash
// Event Interface : _IShockwaveFlashEvents
// *********************************************************************//
template <class T>
class TEvents_ShockwaveFlash : public IConnectionPointImpl<T,
                                                 &DIID__IShockwaveFlashEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnReadyStateChange(long newState);
  void            Fire_OnProgress(long percentDone);
  void            Fire_FSCommand(BSTR command, BSTR args);
  void            Fire_FlashCall(BSTR request);
protected:
  _IShockwaveFlashEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ShockwaveFlash<T>::Fire_OnReadyStateChange(long newState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReadyStateChange(newState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ShockwaveFlash<T>::Fire_OnProgress(long percentDone)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnProgress(percentDone);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ShockwaveFlash<T>::Fire_FSCommand(BSTR command, BSTR args)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.FSCommand(command, args);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ShockwaveFlash<T>::Fire_FlashCall(BSTR request)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.FlashCall(request);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ShockwaveFlash
// Event Interface : _IShockwaveFlashEvents
// *********************************************************************//
template <typename T>
class IShockwaveFlash_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnReadyStateChange(long newState)
  {
    _IShockwaveFlashEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReadyStateChange(newState);
  }

  void Fire_OnProgress(long percentDone)
  {
    _IShockwaveFlashEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnProgress(percentDone);
  }

  void Fire_FSCommand(BSTR command, BSTR args)
  {
    _IShockwaveFlashEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.FSCommand(command, args);
  }

  void Fire_FlashCall(BSTR request)
  {
    _IShockwaveFlashEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.FlashCall(request);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Shockwaveflashobjects_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Shockwaveflashobjects_tlb;
#endif

#pragma option pop

#endif // ShockwaveFlashObjects_TLBH
